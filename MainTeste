import lejos.hardware.Button;
import lejos.hardware.LED;
import lejos.hardware.Sound;
import lejos.hardware.motor.EV3LargeRegulatedMotor;
import lejos.hardware.port.MotorPort;
import lejos.utility.Delay;

public class MainTesteSEK {
	private static EV3LargeRegulatedMotor motorEsq = new EV3LargeRegulatedMotor(
			MotorPort.A);
	private static EV3LargeRegulatedMotor motorDir = new EV3LargeRegulatedMotor(
			MotorPort.C);
	private static EV3LargeRegulatedMotor motorPorta = new EV3LargeRegulatedMotor(
			MotorPort.B);

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		Reconhecimento reconhecimento = new Reconhecimento();
		Thread thReconhecimento = new Thread(reconhecimento);
		thReconhecimento.start();
		Sound.beepSequenceUp();
		while (!Button.ENTER.isDown()) {
		}

		while (!Button.ESCAPE.isDown()) {
			Button.LEDPattern(0);
			if (Reconhecimento.getDistancia() < 0.2) {
				while (Reconhecimento.getDistancia() > 0.04 && !Reconhecimento.getBoneco()) {
					andar(100);
					if (Button.ESCAPE.isDown()){
						System.exit(0);
					}
				}
				parar();
				andar(100);
				Delay.msDelay(2000);
				procurar();	
				//while(Reconhecimento.getBoneco()){
				if (Reconhecimento.getPreto()) {
					Button.LEDPattern(1);
					ré(300);
					Delay.msDelay(450);
					parar();
					abrirPorta();
					andar(300);
					Delay.msDelay(1500);
					parar();
					fecharPorta();
					Button.LEDPattern(0);
					//Reconhecimento.setBoneco(false);
				} else {
					Button.LEDPattern(2);
					Delay.msDelay(1000);
				}
				//}
				
			} else {
				andar(300);
			}
		}
	}

	private static void andar(int vel) {
		motorEsq.setSpeed(vel);
		motorDir.setSpeed(vel);
		motorDir.forward();
		motorEsq.forward();
	}

	private static void parar() {
		motorEsq.stop(true);
		motorDir.stop();
	}

	private static void ré(int vel) {
		motorEsq.setSpeed(vel);
		motorDir.setSpeed(vel);
		motorEsq.backward();
		motorDir.backward();
	}

	private static void procurar() {
		motorDir.setSpeed(200);
		motorEsq.setSpeed(200);
		motorDir.rotate(45, true);
		motorEsq.rotate(-45);
		Delay.msDelay(100);
		motorEsq.rotate(90, true);
		motorDir.rotate(-90);
		Delay.msDelay(100);
		motorDir.rotate(45, true);
		motorEsq.rotate(-45);
	}

	private static void virarEsquerda() {
		motorEsq.stop(true);
		motorDir.forward();
	}

	private static void virarDireita() {
		motorDir.stop(true);
		motorEsq.forward();
	}

	private static void abrirPorta() {
		motorPorta.setSpeed(300);
		motorPorta.rotate(-100);
	}

	private static void fecharPorta() {
		motorPorta.setSpeed(300);
		motorPorta.rotate(100);
	}

}
